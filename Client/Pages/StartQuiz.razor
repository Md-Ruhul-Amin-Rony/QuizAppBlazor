@page "/quiz/start/{id:int}"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using QuizAppBlazor.Shared
@using System.Timers
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime


<h1>Start the quiz</h1>
<hr />

@if (IsLoaded == false)
{
    <p><em>Loading...</em></p>
}else
{
    @if (quiz.Questions.Count > 0)
    {
        <p> Title: @quiz.Title</p>
        <p> Duration: @quiz.TimeLimit mintutes</p>
        <p>Total questions: @quiz.Questions.Count()</p>

        @if (!IsStarted)
        {
            <a class="btn btn-primary" role="button" @onclick="@(() => { Start(); })">Start the quiz</a>
        
        }
       

        @if (IsStarted  && counter>0)
        {
            <p>Time remaining : @timeRemaining</p>

            <EditForm Model="@answer" OnValidSubmit="SubmitAnswer">
                <DataAnnotationsValidator />

                <h3>@quiz.Questions[i].Text</h3>

                @if (@quiz.Questions[i].FileName != null && @quiz.Questions[i].FileName.Contains(".mp4"))
                {
                    <div class="mb-3">
                        <div class="col-md-4">
                            <video controls style="max-width: 100%" muted>
                                <source src="uploads/@quiz.Questions[i].FileName" type="video/mp4" />
                            </video>
                        </div>
                    </div>
                }
                else
                {
                    @if (@quiz.Questions[i].FileName != null)
                    {
                        <div class="mb-3">
                            <div class="col-md-4">
                                <img src="uploads/@quiz.Questions[i].FileName" alt="@quiz.Questions[i].FileName" style="max-width: 100%">
                            </div>
                        </div>

                    }

                }

                @if (quiz.Questions[i].AnswerType == AnswerType.FreeText)
                {
                    <div class="mb-3">
                        <label for="Text" class="form-label">Text</label>
                        <div class="col-md-4">
                            <InputText class="form-control" @bind-Value="answer.Text"/>
                        </div>
                        <ValidationMessage For="@(() => answer.Text)" />
                    </div>

                }
                else
                {
                    <div class="mb-3">
                        <div class="col-md-4">
                            <InputRadioGroup class="form-group" @bind-Value="@answer.Text">
                                <InputRadio Value="@a" /> @quiz.Questions[i].Option1<br>
                                <InputRadio Value="@b" /> @quiz.Questions[i].Option2<br>
                                <InputRadio Value="@c" /> @quiz.Questions[i].Option3<br>
                                <InputRadio Value="@d" /> @quiz.Questions[i].Option4<br>
                            </InputRadioGroup>
                        </div>
                    </div>

                }
                @if (i < quiz.Questions.Count - 1)
                {
                    <div class="form-group">
                        <a class="btn btn-primary" role="button" @onclick="@(() => { NextQuestion(); })">NextQuestion</a>
                    </div>
                }

                @if (i == quiz.Questions.Count - 1)
                {
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
                    </div>
                }

            </EditForm>

        }else if (counter == 0)
        {
            <h3 style="color:red;">Your time is up, Better luck next time!</h3>
        }
    }
    else
    {
        <p>There is no questions to answer</p>
    }

}

@code {
    [Parameter]
    public int id { get; set; }
    protected string Title = "Add";
    protected Quiz quiz = new();
    protected Answer answer = new();
    private static Timer? timer;
    private int counter = 0;
    const string DEFAULT_TIME = "00:00:00";
    string timeRemaining = DEFAULT_TIME;
    DateTime finishTime;

    string a = "A";
    string b = "B";
    string c = "C";
    string d = "D";

    int i = 0;

    bool IsLoaded = false;
    bool IsStarted = false;


    protected override async Task OnParametersSetAsync()
    {
        if (id != 0)
        {
            Title = "Edit";
            quiz = await Http.GetFromJsonAsync<Quiz>("api/Quiz/" + id);
            counter = quiz.TimeLimit * 60;
            IsLoaded = true;
        }
    }

    protected async Task SubmitAnswer()
    {
        answer.QuestionId = quiz.Questions[i].Id;
        if (answer.Text == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Answer is required!");
            return;
        }
        await Http.PostAsJsonAsync("api/Answer", answer);
        answer.Text = null;
        answer.QuestionId = 0;
        NavigationManager.NavigateTo("/thankyou");
    }


    protected async Task NextQuestion()
    {
        answer.QuestionId = quiz.Questions[i].Id;
        if (answer.Text == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Answer is required!");
            return;
        }
        await Http.PostAsJsonAsync("api/Answer", answer);
        answer.Text = null;
        answer.QuestionId = 0;
        i++;
    }

    public void Cancel()
    {

        NavigationManager.NavigateTo("/publishedquizzes");
    }

    public async Task Start()
    {
        IsStarted = true;
        timer = new Timer(1000);
        timer.Elapsed += CountDownTimer;
        timer.Enabled = true;
        finishTime = DateTime.Now.AddMinutes(quiz.TimeLimit);
        timeRemaining = $"{finishTime.Subtract(DateTime.Now)}";

    }

    public void CountDownTimer(Object source, ElapsedEventArgs e)
    {
        if (counter > 0)
        {
            counter -= 1;
            timeRemaining = $"{finishTime.Subtract(DateTime.Now)}";

        }
        else
        {
            timer.Enabled = false;
        }
        InvokeAsync(StateHasChanged);
    }
}


