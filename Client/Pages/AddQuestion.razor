@page "/quiz/addquestion/{quizId:int}"
@page "/quiz/updatequestion/{quizId:int}/{questionId:int}"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using QuizAppBlazor.Shared
@using System.Net.Http.Headers
@inject HttpClient Http



@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager


<h1>@Title Question</h1>
<hr />


<EditForm Model="@question" OnValidSubmit="SaveQuestion">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Text" class="form-label">Question title</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="question.Text" />
        </div>
        <ValidationMessage For="@(() => question.Text)" />
    </div>


    <div class="mb-3">
        <label for="Text" class="form-label">Upload image or video</label>
        <div class="col-md-4">
            <InputFile OnChange="OnFileChanged" multiple accept="image/*,video/*"></InputFile>
        </div>
        <pre>@status</pre>
    </div>

    @if (@question.FileName != null && @question.FileName.Contains(".mp4"))
    {
        <div class="mb-3">
            <div class="col-md-4">
                <video controls style="max-width: 100%" muted>
                    <source src="uploads/@question.FileName" type="video/mp4" />
                </video>
            </div>
        </div>
    }
    else
    {
        @if (@question.FileName != null)
        {
            <div class="mb-3">
                <div class="col-md-4">
                    <img src="uploads/@question.FileName" alt="@question.FileName" style="max-width: 100%">
                </div>
            </div>

        }

    }

    <div class="mb-3">
        <div class="col-md-4">
            <label for="AnswerType" class="form-label">Question type</label>
            <InputSelect class="form-control form-select" @bind-Value="question.AnswerType">
                @foreach (var item in Enum.GetValues(typeof(AnswerType)))
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>
    </div>

    @if (question.AnswerType == AnswerType.MultipleChoice)
    {
        <div class="mb-3">
            <label for="Option1" class="form-label">Option A</label>
            <div class="col-md-4">
                <InputText class="form-control" @bind-Value="question.Option1" />
            </div>
            <ValidationMessage For="@(() => question.Option1)" />
        </div>

        <div class="mb-3">
            <label for="Option2" class="form-label">Option B</label>
            <div class="col-md-4">
                <InputText class="form-control" @bind-Value="question.Option2" />
            </div>
            <ValidationMessage For="@(() => question.Option2)" />
        </div>

        <div class="mb-3">
            <label for="Option3" class="form-label">Option C</label>
            <div class="col-md-4">
                <InputText class="form-control" @bind-Value="question.Option3" />
            </div>
            <ValidationMessage For="@(() => question.Option1)" />
        </div>

        <div class="mb-3">
            <label for="Option4" class="form-label">Option D</label>
            <div class="col-md-4">
                <InputText class="form-control" @bind-Value="question.Option4" />
            </div>
            <ValidationMessage For="@(() => question.Option4)" />
        </div>
    }

    <div class="mb-3">
        <label for="CorrectAnswer" class="form-label">Correct answer</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="question.CorrectAnswer" />
        </div>
        <ValidationMessage For="@(() => question.CorrectAnswer)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int quizId { get; set; }

    [Parameter]
    public int questionId { get; set; }

    protected string Title = "Add";
    protected Question question = new();

    protected override async Task OnParametersSetAsync()
    {
        if (questionId != 0)
        {
            Title = "Edit";
            question = await Http.GetFromJsonAsync<Question>("api/Question/" + questionId);
        }
    }

    protected async Task SaveQuestion()
    {
        question.QuizId = quizId;

        if (question.Id != 0)
        {
            await Http.PutAsJsonAsync("api/Question", question);
        }
        else
        {
            await Http.PostAsJsonAsync("api/Question", question);
        }
        Cancel();
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo($"/quiz/edit/{quizId}");
    }

    string? status;

    async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        long maxFileSize = 10000000;
        var upload = false;


        try
        {
            using var content = new MultipartFormDataContent();

            status += "Changed";

            //var buffer = new byte[4096];

            var file = e.GetMultipleFiles().First();

            //var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file

            //var buffer = new byte[resizedFile.Size];

            status += "\nReading file: " + file.Name;

            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            content.Add(content: fileContent, name: "\"files\"", fileName: file.Name);

            upload = true;


            if (upload)
            {

                await Http.PostAsync("api/Question/UploadFile", content);

            }
            question.FileName = file.Name;
            status += "\nUpload file to server: " + file.Name;
        }
        catch (Exception ex)
        {
            status += "\nError: " + ex.Message;

            _ = InvokeAsync(StateHasChanged);
        }
    }
}
